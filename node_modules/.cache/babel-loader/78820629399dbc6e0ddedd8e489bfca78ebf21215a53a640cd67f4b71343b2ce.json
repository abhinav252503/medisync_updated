{"ast":null,"code":"// File: src/services/mockApi.js\n\n// Intercepts API calls and returns mock data instead of using real backend.\n\nexport const sendOtp = async email => {\n  console.log(\"Mock: Sending OTP to\", email);\n  return Promise.resolve();\n};\nexport const verifyOtp = async (email, otp) => {\n  console.log(\"Mock: Verifying OTP\", email, otp);\n  return Promise.resolve({\n    user: {\n      id: \"u1\",\n      name: \"Test User\",\n      role: email.includes(\"doc\") ? \"doctor\" : \"patient\",\n      email\n    }\n  });\n};\nexport const register = async form => {\n  console.log(\"Mock: Registering user\", form);\n  return Promise.resolve();\n};\nexport const getRecords = async role => {\n  return Promise.resolve({\n    records: [{\n      id: \"r1\",\n      date: \"2025-06-22\",\n      doctorName: \"Dr. Mock\",\n      diagnosis: \"Sample Diagnosis\",\n      fileUrl: \"https://example.com/mock.pdf\"\n    }]\n  });\n};\nexport const uploadPrescription = async () => {\n  return Promise.resolve();\n};\nexport const askAI = async message => {\n  return Promise.resolve({\n    reply: `Mock response to: ${message}`\n  });\n};\nexport const getHospitals = async () => {\n  return Promise.resolve({\n    hospitals: [{\n      name: \"Mock Hospital\",\n      address: \"123 Fake St\",\n      phone: \"1234567890\"\n    }]\n  });\n};","map":{"version":3,"names":["sendOtp","email","console","log","Promise","resolve","verifyOtp","otp","user","id","name","role","includes","register","form","getRecords","records","date","doctorName","diagnosis","fileUrl","uploadPrescription","askAI","message","reply","getHospitals","hospitals","address","phone"],"sources":["D:/medsync/medisync-frontend/src/services/mockApi.js"],"sourcesContent":["// File: src/services/mockApi.js\n\n// Intercepts API calls and returns mock data instead of using real backend.\n\nexport const sendOtp = async (email) => {\n  console.log(\"Mock: Sending OTP to\", email);\n  return Promise.resolve();\n};\n\nexport const verifyOtp = async (email, otp) => {\n  console.log(\"Mock: Verifying OTP\", email, otp);\n  return Promise.resolve({\n    user: {\n      id: \"u1\",\n      name: \"Test User\",\n      role: email.includes(\"doc\") ? \"doctor\" : \"patient\",\n      email,\n    },\n  });\n};\n\nexport const register = async (form) => {\n  console.log(\"Mock: Registering user\", form);\n  return Promise.resolve();\n};\n\nexport const getRecords = async (role) => {\n  return Promise.resolve({\n    records: [\n      {\n        id: \"r1\",\n        date: \"2025-06-22\",\n        doctorName: \"Dr. Mock\",\n        diagnosis: \"Sample Diagnosis\",\n        fileUrl: \"https://example.com/mock.pdf\",\n      },\n    ],\n  });\n};\n\nexport const uploadPrescription = async () => {\n  return Promise.resolve();\n};\n\nexport const askAI = async (message) => {\n  return Promise.resolve({ reply: `Mock response to: ${message}` });\n};\n\nexport const getHospitals = async () => {\n  return Promise.resolve({\n    hospitals: [\n      {\n        name: \"Mock Hospital\",\n        address: \"123 Fake St\",\n        phone: \"1234567890\",\n      },\n    ],\n  });\n};\n"],"mappings":"AAAA;;AAEA;;AAEA,OAAO,MAAMA,OAAO,GAAG,MAAOC,KAAK,IAAK;EACtCC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,KAAK,CAAC;EAC1C,OAAOG,OAAO,CAACC,OAAO,CAAC,CAAC;AAC1B,CAAC;AAED,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOL,KAAK,EAAEM,GAAG,KAAK;EAC7CL,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEF,KAAK,EAAEM,GAAG,CAAC;EAC9C,OAAOH,OAAO,CAACC,OAAO,CAAC;IACrBG,IAAI,EAAE;MACJC,EAAE,EAAE,IAAI;MACRC,IAAI,EAAE,WAAW;MACjBC,IAAI,EAAEV,KAAK,CAACW,QAAQ,CAAC,KAAK,CAAC,GAAG,QAAQ,GAAG,SAAS;MAClDX;IACF;EACF,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMY,QAAQ,GAAG,MAAOC,IAAI,IAAK;EACtCZ,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEW,IAAI,CAAC;EAC3C,OAAOV,OAAO,CAACC,OAAO,CAAC,CAAC;AAC1B,CAAC;AAED,OAAO,MAAMU,UAAU,GAAG,MAAOJ,IAAI,IAAK;EACxC,OAAOP,OAAO,CAACC,OAAO,CAAC;IACrBW,OAAO,EAAE,CACP;MACEP,EAAE,EAAE,IAAI;MACRQ,IAAI,EAAE,YAAY;MAClBC,UAAU,EAAE,UAAU;MACtBC,SAAS,EAAE,kBAAkB;MAC7BC,OAAO,EAAE;IACX,CAAC;EAEL,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,OAAOjB,OAAO,CAACC,OAAO,CAAC,CAAC;AAC1B,CAAC;AAED,OAAO,MAAMiB,KAAK,GAAG,MAAOC,OAAO,IAAK;EACtC,OAAOnB,OAAO,CAACC,OAAO,CAAC;IAAEmB,KAAK,EAAE,qBAAqBD,OAAO;EAAG,CAAC,CAAC;AACnE,CAAC;AAED,OAAO,MAAME,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,OAAOrB,OAAO,CAACC,OAAO,CAAC;IACrBqB,SAAS,EAAE,CACT;MACEhB,IAAI,EAAE,eAAe;MACrBiB,OAAO,EAAE,aAAa;MACtBC,KAAK,EAAE;IACT,CAAC;EAEL,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}