{"ast":null,"code":"// File: src/services/mockApi.js\n\n// Intercepts API calls and returns mock data instead of using real backend.\n\n// File: src/services/mockApi.js\n\n// Fake in‐memory “database”\nconst _records = [{\n  id: 1,\n  date: \"2025-06-01\",\n  doctorName: \"Dr. Smith\",\n  fileUrl: \"#\"\n}, {\n  id: 2,\n  date: \"2025-05-15\",\n  doctorName: \"Dr. Jones\",\n  fileUrl: \"#\"\n}];\nconst _reports = [{\n  id: 1,\n  date: \"2025-06-05\",\n  labName: \"Best Lab\",\n  summary: \"All normal\",\n  fileUrl: \"#\"\n}];\nconst _logs = [{\n  time: \"2025-06-10 14:23\",\n  action: \"view\",\n  by: \"doctor123\"\n}, {\n  time: \"2025-06-09 11:05\",\n  action: \"download\",\n  by: \"patient999\"\n}];\n\n// 1) Patient registration & OTP\nexport async function registerPatient(data) {\n  console.log(\"registerPatient\", data);\n  // simulate API delay\n  return new Promise(res => setTimeout(res, 500));\n}\nexport async function verifySignupOtp(phone, otp) {\n  console.log(\"verifySignupOtp\", phone, otp);\n  // on success, return a user object\n  return {\n    id: \"patient999\",\n    name: \"Jane Doe\",\n    age: 29,\n    sex: \"F\",\n    weight: 65,\n    height: 170,\n    allergies: \"\",\n    chronic: \"\"\n  };\n}\n\n// 2) Login & OTP\nexport async function sendOtp(phoneOrId) {\n  console.log(\"sendOtp to\", phoneOrId);\n  return new Promise(res => setTimeout(res, 500));\n}\nexport async function verifyOtp(phoneOrId, otp) {\n  console.log(\"verifyOtp\", phoneOrId, otp);\n  return {\n    id: \"patient999\",\n    name: \"Jane Doe\",\n    age: 29,\n    sex: \"F\",\n    weight: 65,\n    height: 170,\n    allergies: \"\",\n    chronic: \"\"\n  };\n}\n\n// 3) Data fetchers\nexport async function fetchPatientRecords(patientId) {\n  console.log(\"fetchPatientRecords for\", patientId);\n  return new Promise(res => setTimeout(() => res(_records), 300));\n}\nexport async function fetchPathReports(patientId) {\n  console.log(\"fetchPathReports for\", patientId);\n  return new Promise(res => setTimeout(() => res(_reports), 300));\n}\nexport async function fetchAccessLogs(patientId) {\n  console.log(\"fetchAccessLogs for\", patientId);\n  return new Promise(res => setTimeout(() => res(_logs), 300));\n}\n\n// 4) Upload record\nexport async function uploadRecord(patientId) {\n  console.log(\"uploadRecord for\", patientId);\n  return new Promise(res => setTimeout(() => res({\n    success: true\n  }), 500));\n}\n\n// 5) AI & Hospitals (already existed):\nexport async function askAI(message) {\n  // ...\n}\nexport async function getHospitals(lat, lng) {\n  // ...\n}","map":{"version":3,"names":["_records","id","date","doctorName","fileUrl","_reports","labName","summary","_logs","time","action","by","registerPatient","data","console","log","Promise","res","setTimeout","verifySignupOtp","phone","otp","name","age","sex","weight","height","allergies","chronic","sendOtp","phoneOrId","verifyOtp","fetchPatientRecords","patientId","fetchPathReports","fetchAccessLogs","uploadRecord","success","askAI","message","getHospitals","lat","lng"],"sources":["D:/medsync/medisync-frontend/src/services/mockApi.js"],"sourcesContent":["// File: src/services/mockApi.js\n\n// Intercepts API calls and returns mock data instead of using real backend.\n\n// File: src/services/mockApi.js\n\n// Fake in‐memory “database”\nconst _records = [\n  { id: 1, date: \"2025-06-01\", doctorName: \"Dr. Smith\", fileUrl: \"#\" },\n  { id: 2, date: \"2025-05-15\", doctorName: \"Dr. Jones\", fileUrl: \"#\" },\n];\nconst _reports = [\n  { id: 1, date: \"2025-06-05\", labName: \"Best Lab\", summary: \"All normal\", fileUrl: \"#\" },\n];\nconst _logs = [\n  { time: \"2025-06-10 14:23\", action: \"view\", by: \"doctor123\" },\n  { time: \"2025-06-09 11:05\", action: \"download\", by: \"patient999\" },\n];\n\n// 1) Patient registration & OTP\nexport async function registerPatient(data) {\n  console.log(\"registerPatient\", data);\n  // simulate API delay\n  return new Promise((res) => setTimeout(res, 500));\n}\n\nexport async function verifySignupOtp(phone, otp) {\n  console.log(\"verifySignupOtp\", phone, otp);\n  // on success, return a user object\n  return { id: \"patient999\", name: \"Jane Doe\", age: 29, sex: \"F\", weight: 65, height: 170, allergies: \"\", chronic: \"\" };\n}\n\n// 2) Login & OTP\nexport async function sendOtp(phoneOrId) {\n  console.log(\"sendOtp to\", phoneOrId);\n  return new Promise((res) => setTimeout(res, 500));\n}\n\nexport async function verifyOtp(phoneOrId, otp) {\n  console.log(\"verifyOtp\", phoneOrId, otp);\n  return { id: \"patient999\", name: \"Jane Doe\", age: 29, sex: \"F\", weight: 65, height: 170, allergies: \"\", chronic: \"\" };\n}\n\n// 3) Data fetchers\nexport async function fetchPatientRecords(patientId) {\n  console.log(\"fetchPatientRecords for\", patientId);\n  return new Promise((res) => setTimeout(() => res(_records), 300));\n}\n\nexport async function fetchPathReports(patientId) {\n  console.log(\"fetchPathReports for\", patientId);\n  return new Promise((res) => setTimeout(() => res(_reports), 300));\n}\n\nexport async function fetchAccessLogs(patientId) {\n  console.log(\"fetchAccessLogs for\", patientId);\n  return new Promise((res) => setTimeout(() => res(_logs), 300));\n}\n\n// 4) Upload record\nexport async function uploadRecord(patientId) {\n  console.log(\"uploadRecord for\", patientId);\n  return new Promise((res) => setTimeout(() => res({ success: true }), 500));\n}\n\n// 5) AI & Hospitals (already existed):\nexport async function askAI(message) {\n  // ...\n}\nexport async function getHospitals(lat, lng) {\n  // ...\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}