{"ast":null,"code":"// Mock implementations for doctor workflows\nexport const sendDoctorOtp = async doctorId => {\n  console.debug(\"Mock: send OTP to doctor\", doctorId);\n  return Promise.resolve();\n};\nexport const verifyDoctorOtp = async (doctorId, otp) => {\n  console.debug(\"Mock: verify OTP for doctor\", doctorId, otp);\n  return Promise.resolve({\n    doctor: {\n      id: doctorId,\n      name: \"Dr. Jane Doe\"\n    }\n  });\n};\nexport const requestPatientConsent = async patientId => {\n  console.debug(\"Mock: request consent for patient\", patientId);\n  // simulate patient verifying after 2s\n  await new Promise(r => setTimeout(r, 2000));\n  return Promise.resolve({\n    patient: {\n      id: patientId,\n      name: \"John Smith\"\n    }\n  });\n};\nexport const fetchRecords = async (doctorId, patientId) => {\n  console.debug(\"Mock: fetchRecords for\", doctorId, patientId);\n  return Promise.resolve({\n    records: [{\n      id: \"r1\",\n      date: \"2025-06-20\",\n      symptoms: \"Fever, cough\",\n      diagnosis: \"Flu\"\n    }, {\n      id: \"r2\",\n      date: \"2025-05-11\",\n      symptoms: \"Headache\",\n      diagnosis: \"Migraine\"\n    }]\n  });\n};\nexport const saveRecord = async record => {\n  console.debug(\"Mock: saveRecord\", record);\n  return Promise.resolve({\n    success: true\n  });\n};\nexport const fetchAccessHistory = async doctorId => {\n  console.debug(\"Mock: fetchAccessHistory\", doctorId);\n  return Promise.resolve({\n    history: [{\n      time: \"2025-06-22 10:00\",\n      patientId: \"p1\",\n      action: \"view\",\n      location: \"Hospital\"\n    }, {\n      time: \"2025-06-21 15:30\",\n      patientId: \"p2\",\n      action: \"upload\",\n      location: \"Home Clinic\"\n    }]\n  });\n};","map":{"version":3,"names":["sendDoctorOtp","doctorId","console","debug","Promise","resolve","verifyDoctorOtp","otp","doctor","id","name","requestPatientConsent","patientId","r","setTimeout","patient","fetchRecords","records","date","symptoms","diagnosis","saveRecord","record","success","fetchAccessHistory","history","time","action","location"],"sources":["D:/medsync/medisync-frontend/src/services/doctorApi.js"],"sourcesContent":["// Mock implementations for doctor workflows\r\nexport const sendDoctorOtp = async (doctorId) => {\r\n  console.debug(\"Mock: send OTP to doctor\", doctorId);\r\n  return Promise.resolve();\r\n};\r\n\r\nexport const verifyDoctorOtp = async (doctorId, otp) => {\r\n  console.debug(\"Mock: verify OTP for doctor\", doctorId, otp);\r\n  return Promise.resolve({ doctor: { id: doctorId, name: \"Dr. Jane Doe\" } });\r\n};\r\n\r\nexport const requestPatientConsent = async (patientId) => {\r\n  console.debug(\"Mock: request consent for patient\", patientId);\r\n  // simulate patient verifying after 2s\r\n  await new Promise(r => setTimeout(r, 2000));\r\n  return Promise.resolve({ patient: { id: patientId, name: \"John Smith\" } });\r\n};\r\n\r\nexport const fetchRecords = async (doctorId, patientId) => {\r\n  console.debug(\"Mock: fetchRecords for\", doctorId, patientId);\r\n  return Promise.resolve({\r\n    records: [\r\n      { id: \"r1\", date: \"2025-06-20\", symptoms: \"Fever, cough\", diagnosis: \"Flu\", },\r\n      { id: \"r2\", date: \"2025-05-11\", symptoms: \"Headache\", diagnosis: \"Migraine\" },\r\n    ]\r\n  });\r\n};\r\n\r\nexport const saveRecord = async (record) => {\r\n  console.debug(\"Mock: saveRecord\", record);\r\n  return Promise.resolve({ success: true });\r\n};\r\n\r\nexport const fetchAccessHistory = async (doctorId) => {\r\n  console.debug(\"Mock: fetchAccessHistory\", doctorId);\r\n  return Promise.resolve({\r\n    history: [\r\n      { time: \"2025-06-22 10:00\", patientId: \"p1\", action: \"view\", location: \"Hospital\" },\r\n      { time: \"2025-06-21 15:30\", patientId: \"p2\", action: \"upload\", location: \"Home Clinic\" },\r\n    ]\r\n  });\r\n};\r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,aAAa,GAAG,MAAOC,QAAQ,IAAK;EAC/CC,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEF,QAAQ,CAAC;EACnD,OAAOG,OAAO,CAACC,OAAO,CAAC,CAAC;AAC1B,CAAC;AAED,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAOL,QAAQ,EAAEM,GAAG,KAAK;EACtDL,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEF,QAAQ,EAAEM,GAAG,CAAC;EAC3D,OAAOH,OAAO,CAACC,OAAO,CAAC;IAAEG,MAAM,EAAE;MAAEC,EAAE,EAAER,QAAQ;MAAES,IAAI,EAAE;IAAe;EAAE,CAAC,CAAC;AAC5E,CAAC;AAED,OAAO,MAAMC,qBAAqB,GAAG,MAAOC,SAAS,IAAK;EACxDV,OAAO,CAACC,KAAK,CAAC,mCAAmC,EAAES,SAAS,CAAC;EAC7D;EACA,MAAM,IAAIR,OAAO,CAACS,CAAC,IAAIC,UAAU,CAACD,CAAC,EAAE,IAAI,CAAC,CAAC;EAC3C,OAAOT,OAAO,CAACC,OAAO,CAAC;IAAEU,OAAO,EAAE;MAAEN,EAAE,EAAEG,SAAS;MAAEF,IAAI,EAAE;IAAa;EAAE,CAAC,CAAC;AAC5E,CAAC;AAED,OAAO,MAAMM,YAAY,GAAG,MAAAA,CAAOf,QAAQ,EAAEW,SAAS,KAAK;EACzDV,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEF,QAAQ,EAAEW,SAAS,CAAC;EAC5D,OAAOR,OAAO,CAACC,OAAO,CAAC;IACrBY,OAAO,EAAE,CACP;MAAER,EAAE,EAAE,IAAI;MAAES,IAAI,EAAE,YAAY;MAAEC,QAAQ,EAAE,cAAc;MAAEC,SAAS,EAAE;IAAO,CAAC,EAC7E;MAAEX,EAAE,EAAE,IAAI;MAAES,IAAI,EAAE,YAAY;MAAEC,QAAQ,EAAE,UAAU;MAAEC,SAAS,EAAE;IAAW,CAAC;EAEjF,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,UAAU,GAAG,MAAOC,MAAM,IAAK;EAC1CpB,OAAO,CAACC,KAAK,CAAC,kBAAkB,EAAEmB,MAAM,CAAC;EACzC,OAAOlB,OAAO,CAACC,OAAO,CAAC;IAAEkB,OAAO,EAAE;EAAK,CAAC,CAAC;AAC3C,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAG,MAAOvB,QAAQ,IAAK;EACpDC,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEF,QAAQ,CAAC;EACnD,OAAOG,OAAO,CAACC,OAAO,CAAC;IACrBoB,OAAO,EAAE,CACP;MAAEC,IAAI,EAAE,kBAAkB;MAAEd,SAAS,EAAE,IAAI;MAAEe,MAAM,EAAE,MAAM;MAAEC,QAAQ,EAAE;IAAW,CAAC,EACnF;MAAEF,IAAI,EAAE,kBAAkB;MAAEd,SAAS,EAAE,IAAI;MAAEe,MAAM,EAAE,QAAQ;MAAEC,QAAQ,EAAE;IAAc,CAAC;EAE5F,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}