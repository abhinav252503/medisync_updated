{"ast":null,"code":"// // Mock implementations for doctor workflows\n// export const sendDoctorOtp = async (doctorId) => {\n//   console.debug(\"Mock: send OTP to doctor\", doctorId);\n//   return Promise.resolve();\n// };\n\n// export const verifyDoctorOtp = async (doctorId, otp) => {\n//   console.debug(\"Mock: verify OTP for doctor\", doctorId, otp);\n//   return Promise.resolve({ doctor: { id: doctorId, name: \"Dr. Jane Doe\" } });\n// };\n\n// export const requestPatientConsent = async (patientId) => {\n//   console.debug(\"Mock: request consent for patient\", patientId);\n//   // simulate patient verifying after 2s\n//   await new Promise(r => setTimeout(r, 2000));\n//   return Promise.resolve({ patient: { id: patientId, name: \"John Smith\" } });\n// };\n\n// export const fetchRecords = async (doctorId, patientId) => {\n//   console.debug(\"Mock: fetchRecords for\", doctorId, patientId);\n//   return Promise.resolve({\n//     records: [\n//       { id: \"r1\", date: \"2025-06-20\", symptoms: \"Fever, cough\", diagnosis: \"Flu\", },\n//       { id: \"r2\", date: \"2025-05-11\", symptoms: \"Headache\", diagnosis: \"Migraine\" },\n//     ]\n//   });\n// };\n\n// export const saveRecord = async (record) => {\n//   console.debug(\"Mock: saveRecord\", record);\n//   return Promise.resolve({ success: true });\n// };\n\n// export const fetchAccessHistory = async (doctorId) => {\n//   console.debug(\"Mock: fetchAccessHistory\", doctorId);\n//   return Promise.resolve({\n//     history: [\n//       { time: \"2025-06-22 10:00\", patientId: \"p1\", action: \"view\", location: \"Hospital\" },\n//       { time: \"2025-06-21 15:30\", patientId: \"p2\", action: \"upload\", location: \"Home Clinic\" },\n//     ]\n//   });\n// };\n// File: src/services/doctorApi.js\n// ... your existing mocks:\n\nexport const sendDoctorOtp = async doctorId => {\n  console.debug(\"Mock: send OTP to doctor\", doctorId);\n  return Promise.resolve();\n};\nexport const verifyDoctorOtp = async (doctorId, otp) => {\n  console.debug(\"Mock: verify OTP for doctor\", doctorId, otp);\n  // login flow: returns doctor profile\n  return Promise.resolve({\n    doctor: {\n      id: doctorId,\n      name: \"Dr. Jane Doe\"\n    }\n  });\n};\n\n// --- NEW: registration mocks ---\n\n// Step 1: register doctor (collect name, email, NMC, phone, etc.)\nexport const registerDoctor = async data => {\n  console.debug(\"Mock: register doctor\", data);\n  // in real: validate NMC/API, send OTP via Twilio\n  return Promise.resolve();\n};\n\n// Step 2: verify doctor signup OTP\nexport const verifyDoctorSignupOtp = async (doctorId, otp) => {\n  console.debug(\"Mock: verify signup OTP\", doctorId, otp);\n  // returns same shape as verifyDoctorOtp\n  return Promise.resolve({\n    doctor: {\n      id: doctorId,\n      name: data.name || \"Dr. Jane Doe\"\n    }\n  });\n};\n\n// your other mocks…","map":{"version":3,"names":["sendDoctorOtp","doctorId","console","debug","Promise","resolve","verifyDoctorOtp","otp","doctor","id","name","registerDoctor","data","verifyDoctorSignupOtp"],"sources":["D:/medsync/medisync-frontend/src/services/doctorApi.js"],"sourcesContent":["// // Mock implementations for doctor workflows\r\n// export const sendDoctorOtp = async (doctorId) => {\r\n//   console.debug(\"Mock: send OTP to doctor\", doctorId);\r\n//   return Promise.resolve();\r\n// };\r\n\r\n// export const verifyDoctorOtp = async (doctorId, otp) => {\r\n//   console.debug(\"Mock: verify OTP for doctor\", doctorId, otp);\r\n//   return Promise.resolve({ doctor: { id: doctorId, name: \"Dr. Jane Doe\" } });\r\n// };\r\n\r\n// export const requestPatientConsent = async (patientId) => {\r\n//   console.debug(\"Mock: request consent for patient\", patientId);\r\n//   // simulate patient verifying after 2s\r\n//   await new Promise(r => setTimeout(r, 2000));\r\n//   return Promise.resolve({ patient: { id: patientId, name: \"John Smith\" } });\r\n// };\r\n\r\n// export const fetchRecords = async (doctorId, patientId) => {\r\n//   console.debug(\"Mock: fetchRecords for\", doctorId, patientId);\r\n//   return Promise.resolve({\r\n//     records: [\r\n//       { id: \"r1\", date: \"2025-06-20\", symptoms: \"Fever, cough\", diagnosis: \"Flu\", },\r\n//       { id: \"r2\", date: \"2025-05-11\", symptoms: \"Headache\", diagnosis: \"Migraine\" },\r\n//     ]\r\n//   });\r\n// };\r\n\r\n// export const saveRecord = async (record) => {\r\n//   console.debug(\"Mock: saveRecord\", record);\r\n//   return Promise.resolve({ success: true });\r\n// };\r\n\r\n// export const fetchAccessHistory = async (doctorId) => {\r\n//   console.debug(\"Mock: fetchAccessHistory\", doctorId);\r\n//   return Promise.resolve({\r\n//     history: [\r\n//       { time: \"2025-06-22 10:00\", patientId: \"p1\", action: \"view\", location: \"Hospital\" },\r\n//       { time: \"2025-06-21 15:30\", patientId: \"p2\", action: \"upload\", location: \"Home Clinic\" },\r\n//     ]\r\n//   });\r\n// };\r\n// File: src/services/doctorApi.js\r\n// ... your existing mocks:\r\n\r\nexport const sendDoctorOtp = async (doctorId) => {\r\n  console.debug(\"Mock: send OTP to doctor\", doctorId);\r\n  return Promise.resolve();\r\n};\r\n\r\nexport const verifyDoctorOtp = async (doctorId, otp) => {\r\n  console.debug(\"Mock: verify OTP for doctor\", doctorId, otp);\r\n  // login flow: returns doctor profile\r\n  return Promise.resolve({ doctor: { id: doctorId, name: \"Dr. Jane Doe\" } });\r\n};\r\n\r\n// --- NEW: registration mocks ---\r\n\r\n// Step 1: register doctor (collect name, email, NMC, phone, etc.)\r\nexport const registerDoctor = async (data) => {\r\n  console.debug(\"Mock: register doctor\", data);\r\n  // in real: validate NMC/API, send OTP via Twilio\r\n  return Promise.resolve();\r\n};\r\n\r\n// Step 2: verify doctor signup OTP\r\nexport const verifyDoctorSignupOtp = async (doctorId, otp) => {\r\n  console.debug(\"Mock: verify signup OTP\", doctorId, otp);\r\n  // returns same shape as verifyDoctorOtp\r\n  return Promise.resolve({ doctor: { id: doctorId, name: data.name || \"Dr. Jane Doe\" } });\r\n};\r\n\r\n// your other mocks…\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMA,aAAa,GAAG,MAAOC,QAAQ,IAAK;EAC/CC,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEF,QAAQ,CAAC;EACnD,OAAOG,OAAO,CAACC,OAAO,CAAC,CAAC;AAC1B,CAAC;AAED,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAOL,QAAQ,EAAEM,GAAG,KAAK;EACtDL,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEF,QAAQ,EAAEM,GAAG,CAAC;EAC3D;EACA,OAAOH,OAAO,CAACC,OAAO,CAAC;IAAEG,MAAM,EAAE;MAAEC,EAAE,EAAER,QAAQ;MAAES,IAAI,EAAE;IAAe;EAAE,CAAC,CAAC;AAC5E,CAAC;;AAED;;AAEA;AACA,OAAO,MAAMC,cAAc,GAAG,MAAOC,IAAI,IAAK;EAC5CV,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAES,IAAI,CAAC;EAC5C;EACA,OAAOR,OAAO,CAACC,OAAO,CAAC,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMQ,qBAAqB,GAAG,MAAAA,CAAOZ,QAAQ,EAAEM,GAAG,KAAK;EAC5DL,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,QAAQ,EAAEM,GAAG,CAAC;EACvD;EACA,OAAOH,OAAO,CAACC,OAAO,CAAC;IAAEG,MAAM,EAAE;MAAEC,EAAE,EAAER,QAAQ;MAAES,IAAI,EAAEE,IAAI,CAACF,IAAI,IAAI;IAAe;EAAE,CAAC,CAAC;AACzF,CAAC;;AAED","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}